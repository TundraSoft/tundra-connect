name: 'Security Scan'

permissions:
  actions: read
  contents: read
  security-events: write

on:
  push:
    branches: [main]
    paths-ignore:
      - .dockerignore
      - .gitignore
      - .github/ISSUE_TEMPLATE/*
      - .github/PULL_REQUEST_TEMPLATE*
      - '**.md'
      - ./LICENSE
      - .vscode/*
  pull_request:
    branches: [main]
    paths-ignore:
      - .dockerignore
      - .gitignore
      - .github/ISSUE_TEMPLATE/*
      - .github/PULL_REQUEST_TEMPLATE*
      - '**.md'
      - ./LICENSE
      - .vscode/*
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - fs
          - repo
          - config
      upload_sarif:
        description: 'Upload SARIF results to GitHub Security'
        required: true
        default: true
        type: boolean

jobs:
  trivy-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Run Trivy filesystem scan
        if: github.event.inputs.scan_type == 'fs' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: 0

      - name: Run Trivy repository scan
        if: github.event.inputs.scan_type == 'repo' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'repo'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-repo-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: 0

      - name: Run Trivy config scan
        if: github.event.inputs.scan_type == 'config' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: 0

      - name: Merge SARIF results
        if: github.event.inputs.upload_sarif != 'false'
        run: |
          # Install sarif-multitool if SARIF files exist
          if ls trivy-*-results.sarif 1> /dev/null 2>&1; then
            npm install -g @microsoft/sarif-multitool
            
            # Merge all SARIF files into one
            sarif merge trivy-*-results.sarif --output-file trivy-merged-results.sarif
            
            echo "SARIF files merged successfully"
            ls -la trivy-*.sarif
          else
            echo "No SARIF files found to merge"
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event.inputs.upload_sarif != 'false'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-merged-results.sarif'
          category: 'trivy-security-scan'
        continue-on-error: true

      - name: Generate human-readable report
        run: |
          echo "# Trivy Security Scan Summary" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date:** $(date)" >> security-report.md
          echo "**Repository:** ${{ github.repository }}" >> security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          # Run Trivy scans with table format for the summary
          echo "## Filesystem Vulnerabilities" >> security-report.md
          echo "\`\`\`" >> security-report.md
          trivy fs --format table --severity CRITICAL,HIGH,MEDIUM . >> security-report.md || echo "No critical/high/medium vulnerabilities found in filesystem" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Repository Vulnerabilities" >> security-report.md
          echo "\`\`\`" >> security-report.md
          trivy repo --format table --severity CRITICAL,HIGH,MEDIUM . >> security-report.md || echo "No critical/high/medium vulnerabilities found in repository" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Configuration Issues" >> security-report.md
          echo "\`\`\`" >> security-report.md
          trivy config --format table --severity CRITICAL,HIGH,MEDIUM . >> security-report.md || echo "No critical/high/medium configuration issues found" >> security-report.md
          echo "\`\`\`" >> security-report.md
          
          cat security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-security-report
          path: |
            security-report.md
            trivy-*.sarif
          retention-days: 30

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = `## 🔒 Security Scan Results\n\n`;
            comment += `Trivy security scan completed for this PR.\n\n`;
            
            // Try to read the security report
            if (fs.existsSync('security-report.md')) {
              const report = fs.readFileSync('security-report.md', 'utf8');
              
              // Extract key information
              const lines = report.split('\n');
              let hasVulnerabilities = false;
              
              for (const line of lines) {
                if (line.includes('CRITICAL') || line.includes('HIGH')) {
                  hasVulnerabilities = true;
                  break;
                }
              }
              
              if (hasVulnerabilities) {
                comment += `⚠️ **Potential security issues found**\n\n`;
                comment += `Please review the [security report artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.\n\n`;
              } else {
                comment += `✅ **No critical or high severity vulnerabilities found**\n\n`;
              }
            } else {
              comment += `ℹ️ Security scan completed. Check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.\n\n`;
            }
            
            comment += `**Scans performed:**\n`;
            comment += `- 🗂️ Filesystem scan\n`;
            comment += `- 📁 Repository scan\n`;
            comment += `- ⚙️ Configuration scan\n\n`;
            comment += `Results are available in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning) and as [workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).`;
            
            // Find existing security comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('🔒 Security Scan Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
