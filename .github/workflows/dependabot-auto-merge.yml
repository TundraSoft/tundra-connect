name: 🤖 Dependabot Auto-merge

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  pull-requests: write

jobs:
  dependabot:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: 🏷️ Add labels to dependabot PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = ['dependencies', 'automated'];
            
            // Add specific labels based on dependency type
            const updateType = '${{ steps.metadata.outputs.update-type }}';
            const dependencyType = '${{ steps.metadata.outputs.dependency-type }}';
            
            if (updateType === 'version-update:semver-patch') {
              labels.push('patch');
            } else if (updateType === 'version-update:semver-minor') {
              labels.push('minor');
            } else if (updateType === 'version-update:semver-major') {
              labels.push('major', 'breaking-change');
            }
            
            if (dependencyType === 'direct:development') {
              labels.push('dev-dependencies');
            } else if (dependencyType === 'direct:production') {
              labels.push('prod-dependencies');
            }
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });

      - name: ✅ Auto-approve patch and minor updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor'
        run: |
          gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: 🚀 Auto-merge patch updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch'
        run: |
          gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: 📝 Comment on major updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-major'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## 🚨 Major Version Update Detected

            This PR contains a **major version update** that may include breaking changes.

            ### 📋 Review Checklist:
            - [ ] Review the changelog/release notes for breaking changes
            - [ ] Update any affected code to handle API changes
            - [ ] Test all affected connects thoroughly
            - [ ] Update documentation if necessary
            - [ ] Consider the impact on existing users

            ### 🔍 Dependency Details:
            - **Package**: ${{ steps.metadata.outputs.dependency-names }}
            - **Update Type**: ${{ steps.metadata.outputs.update-type }}
            - **From**: ${{ steps.metadata.outputs.previous-version }}
            - **To**: ${{ steps.metadata.outputs.new-version }}

            **⚠️ Manual review and approval required before merging.**`
            });

  # Run tests after dependabot creates PR to ensure everything works
  test-dependabot-changes:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦕 Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: 🔍 Check code formatting
        run: deno fmt --check

      - name: 🧪 Run linting
        run: deno lint

      - name: 🧪 Run tests (if they exist)
        run: |
          if [ -d "tests" ] || find . -name "*test*" -type f | grep -q .; then
            deno test --allow-all
          else
            echo "No tests found, skipping test execution"
          fi
